# Auto-generated using compose2nix v0.3.3-pre.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."crafty_container" = {
    image = "registry.gitlab.com/crafty-controller/crafty-4:latest";
    environment = {
      "TZ" = "Etc/EDT";
    };
    volumes = [
      "/services/minecraft/craftycontroller/backups:/crafty/backups:rw"
      "/services/minecraft/craftycontroller/config:/crafty/app/config:rw"
      "/services/minecraft/craftycontroller/import:/crafty/import:rw"
      "/services/minecraft/craftycontroller/logs:/crafty/logs:rw"
      "/services/minecraft/craftycontroller/servers:/crafty/servers:rw"
    ];
    ports = [
      "8000:8000/tcp"
      "8443:8443/tcp"
      "8123:8123/tcp"
      "19132:19132/udp"
      "25500:25500/tcp"
      "25501:25501/tcp"
      "25502:25502/tcp"
      "25503:25503/tcp"
      "25504:25504/tcp"
      "25505:25505/tcp"
      "25506:25506/tcp"
      "25507:25507/tcp"
      "25508:25508/tcp"
      "25509:25509/tcp"
      "25510:25510/tcp"
      "25511:25511/tcp"
      "25512:25512/tcp"
      "25513:25513/tcp"
      "25514:25514/tcp"
      "25515:25515/tcp"
      "25516:25516/tcp"
      "25517:25517/tcp"
      "25518:25518/tcp"
      "25519:25519/tcp"
      "25520:25520/tcp"
      "25521:25521/tcp"
      "25522:25522/tcp"
      "25523:25523/tcp"
      "25524:25524/tcp"
      "25525:25525/tcp"
      "25526:25526/tcp"
      "25527:25527/tcp"
      "25528:25528/tcp"
      "25529:25529/tcp"
      "25530:25530/tcp"
      "25531:25531/tcp"
      "25532:25532/tcp"
      "25533:25533/tcp"
      "25534:25534/tcp"
      "25535:25535/tcp"
      "25536:25536/tcp"
      "25537:25537/tcp"
      "25538:25538/tcp"
      "25539:25539/tcp"
      "25540:25540/tcp"
      "25541:25541/tcp"
      "25542:25542/tcp"
      "25543:25543/tcp"
      "25544:25544/tcp"
      "25545:25545/tcp"
      "25546:25546/tcp"
      "25547:25547/tcp"
      "25548:25548/tcp"
      "25549:25549/tcp"
      "25550:25550/tcp"
      "25551:25551/tcp"
      "25552:25552/tcp"
      "25553:25553/tcp"
      "25554:25554/tcp"
      "25555:25555/tcp"
      "25556:25556/tcp"
      "25557:25557/tcp"
      "25558:25558/tcp"
      "25559:25559/tcp"
      "25560:25560/tcp"
      "25561:25561/tcp"
      "25562:25562/tcp"
      "25563:25563/tcp"
      "25564:25564/tcp"
      "25565:25565/tcp"
      "25566:25566/tcp"
      "25567:25567/tcp"
      "25568:25568/tcp"
      "25569:25569/tcp"
      "25570:25570/tcp"
      "25571:25571/tcp"
      "25572:25572/tcp"
      "25573:25573/tcp"
      "25574:25574/tcp"
      "25575:25575/tcp"
      "25576:25576/tcp"
      "25577:25577/tcp"
      "25578:25578/tcp"
      "25579:25579/tcp"
      "25580:25580/tcp"
      "25581:25581/tcp"
      "25582:25582/tcp"
      "25583:25583/tcp"
      "25584:25584/tcp"
      "25585:25585/tcp"
      "25586:25586/tcp"
      "25587:25587/tcp"
      "25588:25588/tcp"
      "25589:25589/tcp"
      "25590:25590/tcp"
      "25591:25591/tcp"
      "25592:25592/tcp"
      "25593:25593/tcp"
      "25594:25594/tcp"
      "25595:25595/tcp"
      "25596:25596/tcp"
      "25597:25597/tcp"
      "25598:25598/tcp"
      "25599:25599/tcp"
      "25600:25600/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=crafty"
      "--network=crafty_default"
    ];
  };
  systemd.services."docker-crafty_container" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-crafty_default.service"
    ];
    requires = [
      "docker-network-crafty_default.service"
    ];
    partOf = [
      "docker-compose-crafty-root.target"
    ];
    wantedBy = [
      "docker-compose-crafty-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-crafty_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f crafty_default";
    };
    script = ''
      docker network inspect crafty_default || docker network create crafty_default
    '';
    partOf = [ "docker-compose-crafty-root.target" ];
    wantedBy = [ "docker-compose-crafty-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-crafty-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
