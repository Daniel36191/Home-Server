# Auto-generated using compose2nix v0.3.3-pre.
{ pkgs, lib, ... }:

{
  # Containers
  virtualisation.oci-containers.containers."crafty_container" = {
    image = "registry.gitlab.com/crafty-controller/crafty-4:latest";
    environment = {
      "TZ" = "Etc/EDT";
    };
    volumes = [
      "/services/minecraft/craftycontroller/backups:/crafty/backups:rw"
      "/services/minecraft/craftycontroller/config:/crafty/app/config:rw"
      "/services/minecraft/craftycontroller/import:/crafty/import:rw"
      "/services/minecraft/craftycontroller/logs:/crafty/logs:rw"
      "/services/minecraft/craftycontroller/servers:/crafty/servers:rw"
    ];
    ports = [
      "8000:8000/tcp"
      "8443:8443/tcp"
      "8123:8123/tcp"
      "19132:19132/udp"
      "25500:25500/tcp"
      "25501:25501/tcp"
      "25502:25502/tcp"
      "25503:25503/tcp"
      "25504:25504/tcp"
      "25505:25505/tcp"
    ];
    log-driver = "journald";
    extraOptions = [
      "--network-alias=crafty"
      "--network=crafty_default"
    ];
  };
  systemd.services."docker-crafty_container" = {
    serviceConfig = {
      Restart = lib.mkOverride 90 "always";
      RestartMaxDelaySec = lib.mkOverride 90 "1m";
      RestartSec = lib.mkOverride 90 "100ms";
      RestartSteps = lib.mkOverride 90 9;
    };
    after = [
      "docker-network-crafty_default.service"
    ];
    requires = [
      "docker-network-crafty_default.service"
    ];
    partOf = [
      "docker-compose-crafty-root.target"
    ];
    wantedBy = [
      "docker-compose-crafty-root.target"
    ];
  };

  # Networks
  systemd.services."docker-network-crafty_default" = {
    path = [ pkgs.docker ];
    serviceConfig = {
      Type = "oneshot";
      RemainAfterExit = true;
      ExecStop = "docker network rm -f crafty_default";
    };
    script = ''
      docker network inspect crafty_default || docker network create crafty_default
    '';
    partOf = [ "docker-compose-crafty-root.target" ];
    wantedBy = [ "docker-compose-crafty-root.target" ];
  };

  # Root service
  # When started, this will automatically create all resources and start
  # the containers. When stopped, this will teardown all resources.
  systemd.targets."docker-compose-crafty-root" = {
    unitConfig = {
      Description = "Root target generated by compose2nix.";
    };
    wantedBy = [ "multi-user.target" ];
  };
}
